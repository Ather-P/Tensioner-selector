# -*- coding: utf-8 -*-
"""Tensioner_selector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FSKx1VMjxI-uzO1s7FnUhBQCTvhPf3la
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

GA_Tensioner = pd.read_csv("/content/drive/MyDrive/Tensioner/Histrong_Tensioner.csv")
    Tool_Cylinder = pd.read_csv("/content/drive/MyDrive/Tensioner/Tool_Cylinder.csv")
    Bridge = pd.read_csv("/content/drive/MyDrive/Tensioner/Bridge.csv")
    Puller = pd.read_csv("/content/drive/MyDrive/Tensioner/Puller.csv")

#result_Tool = df['Tool No.']
#result_tool_no = []
#for i in result_Tool:
#  result_tool_no.append(i)
#df1 = pd.DataFrame()
#for i in result_tool_no:
#  df1 = df1.append((Bridge[Bridge['TOOL']==i]))

CTC = int(input("Enter CTC of the application:   "))
Radial_Clearance = int(input("Enter Radial clearance, if not Enter 0:     "))
Axial_Clearance = int(input("Enter Axial clearance, if not Enter 0:      "))
Bolt_across_corner = int(input("Enter Across corner for the bolt:      "))
Load_kN = int(input("Enter Load value in kN if not enter zero :       "))
def convert_to_float(frac_str):
    try:
        return float(frac_str)
    except ValueError:
        num, denom = frac_str.split('/')
        try:
            leading, num = num.split(' ')
            whole = float(leading)
        except ValueError:
            whole = 0
        frac = float(num) / float(denom)
        return whole - frac if whole < 0 else whole + frac
if Load_kN == 0:
  Bolt_Type = (input("Enter I for Imperial and M for Metric  ?  :      ")).upper()
  if Bolt_Type == "I" :
    Bolt_Size_in = input('Enter Bolt Size in format x x/x:    ')
    diameter_of_bolt = convert_to_float(Bolt_Size_in)*25.4
    Bolt_Size_In = Bolt_Size_in.replace(" ","-")+'"'
    df = pd.DataFrame(GA_Tensioner[GA_Tensioner['Bolt Size in'] == Bolt_Size_In])
    df2 = pd.DataFrame(Puller[Puller['STUD SIZE in '] == Bolt_Size_In])
    if Axial_Clearance == 0:
      print("No Height issue")
    else: 
      df2 = df2[df2['OAL'] < Axial_Clearance]
  else:
    Bolt_Size_M = int(input("Enter Bolt Size :     "))
    Bolt_Size_m = "M" + str(Bolt_Size_M)
    df = pd.DataFrame(GA_Tensioner[GA_Tensioner['Bolt Size mm'] == Bolt_Size_m])
    df2 = pd.DataFrame(Puller[Puller['STUD SIZE mm'] == Bolt_Size_m])
    diameter_of_bolt = Bolt_Size_M
    if Axial_Clearance == 0:
      print("No Height issue")
    else: 
      df2 = df2[df2['OAL'] < Axial_Clearance]
  if df2.empty:
    print("Fitment Error Axially")
  print(df2['TOOL'])
else:
  Bolt_Type = (input("Enter I for Imperial and M for Metric  ?  :      ")).upper()
  if Bolt_Type == "I" :
    Bolt_Size_in = input('Enter Bolt Size in format x x/x:    ')
    diameter_of_bolt = convert_to_float(Bolt_Size_in)*25.4
    Bolt_Size_In = Bolt_Size_in.replace(" ","-")+'"'
    df = pd.DataFrame(GA_Tensioner[GA_Tensioner['Bolt Size in'] == Bolt_Size_In])
    df = df[df['MAX. LOAD kN']>=Load_kN]
    df2 = pd.DataFrame(Puller[Puller['STUD SIZE in '] == Bolt_Size_In])
    if Axial_Clearance == 0:
      print("No Height issue")
    else: 
      df2 = df2[df2['OAL'] < Axial_Clearance]
  else:
    Bolt_Size_M = int(input("Enter Bolt Size :     "))
    Bolt_Size_m = "M" + str(Bolt_Size_M)
    df = pd.DataFrame(GA_Tensioner[GA_Tensioner['Bolt Size mm'] == Bolt_Size_m])
    df = df[df['MAX. LOAD kN']>=Load_kN]
    df2 = pd.DataFrame(Puller[Puller['STUD SIZE mm'] == Bolt_Size_m])
    diameter_of_bolt = Bolt_Size_M
    if Axial_Clearance == 0:
      print("No Height issue")
    else: 
      df2 = df2[df2['OAL'] < Axial_Clearance]
  if df2.empty:
    print("Fitment Error Axially")
  print(df2['TOOL'])
  if df.empty:
    print("Load Exceeded on Standard Tensioners, recommended for customized Load Cell")
print("------------------------------------------------------------------")
print(df)
check_CTC = ((2*CTC) - diameter_of_bolt)-5
check_bridge = ((2*CTC)-Bolt_across_corner)-4
result_Tool = df['Tool No.']
result_tool_no = []
for i in result_Tool:
  result_tool_no.append(i)
df1 = pd.DataFrame()
for i in result_tool_no:
  df1 = df1.append((Bridge[Bridge['TOOL']==i]))
df3 = pd.DataFrame()
for i in result_tool_no:
  df3 = df3.append((Tool_Cylinder[Tool_Cylinder['TOOL']==i]))
if Radial_Clearance > 0:
  df3 = df3[df3['ODT'] < (Radial_Clearance*2)]
  df1 = df1[df1['D']<check_CTC]
  df1 = df1[df1['D']<Radial_Clearance]
  a = df3['TOOL'].tolist()
  b = df1['TOOL'].tolist()
  if df1.empty:
    print("Customized Bridge")
  else:
    print(f"Standard Bridge of {b}")
  if df3.empty:
    print(f"Customized load cell because of collision, contact PEG of {a}")
  else:
    print(f"Standard Load cell of {a}")
elif Radial_Clearance == 0:
  df3 = df3[df3['ODT'] < check_CTC]
  df1 = df1[df1['D']<check_bridge]
  a = df3['TOOL'].tolist()
  b = df1['TOOL'].tolist()
  if df1.empty:
    print("Customized Bridge")
  else:
    print(f"Standard Bridge of {b}")
  if df3.empty:
    print(f"Customized load cell because of collision, contact PEG {a}")
  else:
    print(f"Standard Load cell of {a}")
else:
  print("Invalid Radial Clearance")
print("------------------------------------------------------------------")